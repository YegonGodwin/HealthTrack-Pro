
import { AlertTriangle, Check, BellRing, X } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from '@/components/ui/button';
import { useState } from 'react';

interface HealthAlert {
  id: string;
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high';
  timestamp: Date;
  acknowledged: boolean;
}

const PredictiveAlerts = () => {
  // Mock health alerts - in a real app, these would be generated by an AI model
  const [alerts, setAlerts] = useState<HealthAlert[]>([
    {
      id: '1',
      title: 'Elevated Heart Rate Pattern',
      description: 'Your heart rate has shown elevated patterns during rest over the past week. Consider reducing caffeine intake and monitoring stress levels.',
      severity: 'medium',
      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
      acknowledged: false,
    },
    {
      id: '2',
      title: 'Sleep Quality Decline',
      description: 'AI analysis indicates your sleep quality has declined by 15% this month. Consider adjusting your sleep routine and reducing screen time before bed.',
      severity: 'medium',
      timestamp: new Date(Date.now() - 8 * 60 * 60 * 1000), // 8 hours ago
      acknowledged: false,
    },
    {
      id: '3',
      title: 'Possible Medication Interaction',
      description: 'Based on your current medications, our AI has detected a potential interaction that may affect your blood pressure. Please consult your doctor.',
      severity: 'high',
      timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago
      acknowledged: false,
    },
    {
      id: '4',
      title: 'Activity Level Decrease',
      description: 'Your activity level has decreased by 30% compared to your monthly average. Consider scheduling short walks throughout the day.',
      severity: 'low',
      timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
      acknowledged: true,
    },
  ]);

  const handleAcknowledge = (id: string) => {
    setAlerts(alerts.map(alert => 
      alert.id === id ? { ...alert, acknowledged: true } : alert
    ));
  };

  const handleDismiss = (id: string) => {
    setAlerts(alerts.filter(alert => alert.id !== id));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'low':
        return 'text-health-blue bg-health-blue/10 border-health-blue/30';
      case 'medium':
        return 'text-health-yellow bg-health-yellow/10 border-health-yellow/30';
      case 'high':
        return 'text-health-red bg-health-red/10 border-health-red/30';
      default:
        return 'text-health-blue bg-health-blue/10 border-health-blue/30';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'low':
        return <BellRing className="h-5 w-5" />;
      case 'medium':
        return <AlertTriangle className="h-5 w-5" />;
      case 'high':
        return <AlertTriangle className="h-5 w-5" />;
      default:
        return <BellRing className="h-5 w-5" />;
    }
  };

  const activeAlerts = alerts.filter(alert => !alert.acknowledged);
  const acknowledgedAlerts = alerts.filter(alert => alert.acknowledged);

  const formatTimeDifference = (timestamp: Date) => {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - timestamp.getTime()) / 1000);
    
    if (diffInSeconds < 60) {
      return `${diffInSeconds} seconds ago`;
    }
    
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) {
      return `${diffInMinutes} minute${diffInMinutes !== 1 ? 's' : ''} ago`;
    }
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) {
      return `${diffInHours} hour${diffInHours !== 1 ? 's' : ''} ago`;
    }
    
    const diffInDays = Math.floor(diffInHours / 24);
    return `${diffInDays} day${diffInDays !== 1 ? 's' : ''} ago`;
  };

  return (
    <Card className="glass-card micro-bounce shadow-lg border border-gray-200 dark:border-gray-800">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2">
          <AlertTriangle size={20} className="text-health-yellow" />
          AI Health Alerts
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {activeAlerts.length === 0 && acknowledgedAlerts.length === 0 && (
          <div className="flex flex-col items-center justify-center p-6 bg-green-50/50 dark:bg-green-900/20 rounded-lg border border-green-100 dark:border-green-800">
            <Check className="h-10 w-10 text-health-green mb-2" />
            <p className="text-center text-gray-700 dark:text-gray-300">No health alerts detected. Your metrics look good!</p>
          </div>
        )}
        
        {activeAlerts.length > 0 && (
          <div className="space-y-3">
            <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300">Active Alerts ({activeAlerts.length})</h3>
            
            {activeAlerts.map((alert) => (
              <Alert key={alert.id} className={`${getSeverityColor(alert.severity)} animate-fade-in-up backdrop-blur-sm`}>
                <div className="flex items-start">
                  {getSeverityIcon(alert.severity)}
                  <div className="ml-3 flex-1">
                    <AlertTitle className="flex items-center justify-between">
                      {alert.title}
                      <span className="text-xs font-normal opacity-70">{formatTimeDifference(alert.timestamp)}</span>
                    </AlertTitle>
                    <AlertDescription className="mt-1">{alert.description}</AlertDescription>
                    <div className="mt-3 flex items-center justify-end space-x-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => handleDismiss(alert.id)}
                        className="h-7 px-2 text-xs border-gray-300 dark:border-gray-600"
                      >
                        <X className="h-3 w-3 mr-1" />
                        Dismiss
                      </Button>
                      <Button 
                        size="sm" 
                        onClick={() => handleAcknowledge(alert.id)}
                        className="h-7 px-2 text-xs bg-gray-800 hover:bg-gray-700 dark:bg-gray-700 dark:hover:bg-gray-600"
                      >
                        <Check className="h-3 w-3 mr-1" />
                        Acknowledge
                      </Button>
                    </div>
                  </div>
                </div>
              </Alert>
            ))}
          </div>
        )}
        
        {acknowledgedAlerts.length > 0 && (
          <div className="space-y-3">
            <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">Acknowledged Alerts ({acknowledgedAlerts.length})</h3>
            
            {acknowledgedAlerts.map((alert) => (
              <Alert key={alert.id} className="bg-gray-100/50 dark:bg-gray-800/50 border border-gray-200 dark:border-gray-700 text-gray-500 dark:text-gray-400">
                <div className="flex items-start">
                  <div className="opacity-50">
                    {getSeverityIcon(alert.severity)}
                  </div>
                  <div className="ml-3 flex-1">
                    <AlertTitle className="flex items-center justify-between opacity-75">
                      {alert.title}
                      <span className="text-xs font-normal opacity-70">{formatTimeDifference(alert.timestamp)}</span>
                    </AlertTitle>
                    <AlertDescription className="mt-1 opacity-75">{alert.description}</AlertDescription>
                    <div className="mt-3 flex items-center justify-end space-x-2">
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => handleDismiss(alert.id)}
                        className="h-7 px-2 text-xs border-gray-300 dark:border-gray-600"
                      >
                        <X className="h-3 w-3 mr-1" />
                        Remove
                      </Button>
                    </div>
                  </div>
                </div>
              </Alert>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default PredictiveAlerts;
